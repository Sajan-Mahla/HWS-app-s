📱 GuessTheFlag – Learning Journal

🗓️ Date: 28th July 2025

🧠 What I Learned:
✅ How to use @State for dynamic UI state management.
✅ RadialGradient background styling to create Apple-level UI.
✅ Used VStack, Spacer, and .padding() for structured layout.
✅ Created a score-tracking mechanism using state and alerts.
✅ Practiced Button actions with parameterized functions.
✅ Built a dynamic list of countries using .shuffled() and correctAnswer = Int.random(...).
✅ Displayed alert using .alert(...) with isPresented binding.
🛠️ SwiftUI Techniques Used:
Concept	Swift Feature Used
State Management	@State properties
UI Layout	VStack, Spacer, .padding, .frame
Images + Styling	Image(...).clipShape(.capsule).shadow()
Gradients	RadialGradient
Alerts	.alert(isPresented:)
Randomization	.shuffled() + Int.random(in: 0...2)
⚙️ Key Code Snippets:
@State private var countries = ["Estonia", "France", ...].shuffled()
@State private var correctAnswer = Int.random(in: 0...2)

Button {
    flagTapped(number)
} label: {
    Image(countries[number])
        .clipShape(.capsule)
        .shadow(radius: 5)
}
💡 Insights / Takeaways:
📌 @State variables update the UI automatically — no need for manual refresh.
📌 SwiftUI alerts are super declarative — clean and readable.
📌 Randomizing array for game logic is easy and powerful with .shuffled().
📌 Clip shapes and shadows add polish with very little code.
📌 Design and gameplay can evolve — this was a great template for future interactive apps.
🔮 Future Improvements:
 Add a Score Counter visible and updating after every question.
 Add animations on correct/wrong flag taps.
 Add high score tracking using @AppStorage or UserDefaults.
 Add flag descriptions or facts to make it educational.
 Refactor code into MVVM structure for scalability.
📝 Final Thought:
This game taught me the power of SwiftUI’s declarative UI + state-driven updates.
Building logic + UI simultaneously = Faster Development.
And I’m one step closer to Apple-level app skills.
🏷️ Tags: SwiftUI, State Management, iOS Dev, HackingWithSwift, LearningApp6





CODE: //
//  ContentView.swift
//  GuessTheFlag
//
//  Created by Sajan Mahla on 28/07/25.
//

import SwiftUI

struct ContentView: View {

    @State private var countries = [
        "Estonia", "France", "Germany",
        "Ireland", "Italy", "Nigeria",
        "Poland", "Spain", "UK",
        "Ukraine", "US"
    ].shuffled()

    @State private var correctAnswer = Int.random(in: 0...2)
    @State private var showingScore = false
    @State private var scoreTitle = ""
    @State private var score = 0

    var body: some View {
        ZStack {
            RadialGradient(stops: [
                .init(color: Color(red: 0.1, green: 0.2, blue: 0.45), location: 0.3),
                .init(color: Color(red: 0.76, green: 0.15, blue: 0.26), location: 0.3)
            ], center: .top, startRadius: 200, endRadius: 700)
                .ignoresSafeArea()

            VStack {
                Spacer()

                Text("Guess the Flag")
                    .font(.largeTitle.bold())
                    .foregroundStyle(.white)

                VStack(spacing: 15) {
                    VStack {
                        Text("Tap the flag of")
                            .foregroundStyle(.secondary)
                            .font(.subheadline.weight(.heavy))

                        Text(countries[correctAnswer])
                            .font(.largeTitle.weight(.semibold))
                    }

                    ForEach(0..<3) { number in
                        Button {
                            flagTapped(number)
                        } label: {
                            Image(countries[number])
                                .clipShape(Capsule())
                                .shadow(radius: 5)
                        }
                    }
                }
                .frame(maxWidth: .infinity)
                .padding(.vertical, 20)
                .background(.regularMaterial)
                .clipShape(RoundedRectangle(cornerRadius: 20))

                Spacer()

                Text("Score: \(score)")
                    .foregroundStyle(.white)
                    .font(.title.bold())

                Spacer()
            }
            .padding()
        }
        .alert(scoreTitle, isPresented: $showingScore) {
            Button("Continue", action: askQuestion)
        } message: {
            Text("Your score is \(score)")
        }
    }

    func flagTapped(_ number: Int) {
        if number == correctAnswer {
            scoreTitle = "Correct"
            score += 1
        } else {
            scoreTitle = "Wrong! That's the flag of \(countries[number])"
        }

        showingScore = true
    }

    func askQuestion() {
        countries.shuffle()
        correctAnswer = Int.random(in: 0...2)
    }
}

#Preview {
    ContentView()
}

